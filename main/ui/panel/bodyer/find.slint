import { LineEdit, ListView } from "std-widgets.slint";
import { Theme, Icons } from "../../theme.slint";
import { Store, FindEntry } from "../../store.slint";
import { Logic } from "../../logic.slint";
import { Util } from "../../util.slint";
import { IconBtn, ElevatedBtn, Head, Label, Tag, Link, Label, NoDataImg, NoMessageImg, IconsDialogSetting, CenterLayout, InputBar } from "../../base/widgets.slint";

component FHead inherits Head {
    in-out property <bool> is-search;

    icon: Icons.find-light;
    title: Logic.tr(Store.is-cn, "发现");

    callback scroll-to_top();

    Rectangle {
        horizontal-stretch: 1;
        if !is-search: HorizontalLayout {
            padding-left: Theme.padding * 4;

            Label {
                color: Theme.placeholder-text-color;
                text: Logic.find-entrys-counts(Store.find-entrys-counts-flag);
            }
        }

        if !is-search: TouchArea {
            clicked => {
                root.scroll-to-top();
            }
        }

        search-lineedit := InputBar {
            visible: is-search;
            height: parent.height;
            padding-left: Theme.padding * 4;

            placeholder-text: Logic.tr(Store.is-cn, "输入关键字");
            accepted => {
                Logic.update-find-entrylist(self.text);
                self.force-clear-focus();
            }
        }
    }

    HorizontalLayout {
        padding-left: Theme.padding * 2;
        IconBtn {
            icon: root.is-search ? Icons.hide : Icons.search;
            clicked => {
                search-lineedit.force-clear-focus();
                root.is-search = !root.is-search;
                if (root.is-search) {
                    search-lineedit.text = "";
                    search-lineedit.focus();
                }
            }
        }
    }
}

component EntryList inherits Rectangle {
    private property <length> item-length: 40px;
    in property <[FindEntry]> items: [];

    public function scroll-to-top(){
        lv.viewport-y = 0;
    }

    lv := ListView {
        x: 0px;
        width: root.width + Theme.scroll-width + 3px;

        for item[index] in items: Rectangle {
            background: Theme.base-background;
            HorizontalLayout {
            height: root.item-length;

            spacing: Theme.spacing * 4;
            padding: Theme.padding;
            padding-right: Theme.padding * 2;

            CenterLayout {
                horizontal-stretch: 1;
                Link {
                    width: 100%;
                    wrap: no-wrap;
                    text: item.name;
                    color: Theme.primary-text-color;
                    font-size: Theme.default-font-size;
                    overflow: elide;

                    clicked => {
                        // Util.open-url(item.url);
                    }
                }
            }

            CenterLayout {
                HorizontalLayout {
                    spacing: Theme.spacing * 4;

                    if item.is-blacklist: IconBtn {
                        icon: Icons.recover-from-trash;
                        icon-width: Theme.icon-size * 0.85;
                        clicked => {
                            Logic.recover-from-find-blacklist(index, item.url);
                        }
                    }

                    IconBtn {
                        icon: Icons.add-in-rect;
                        icon-width: Theme.icon-size * 1.2;
                        clicked => {
                            Logic.new-rss({
                                feed_format: "AUTO",
                                name: item.name,
                                url: item.url,
                                icon-index: Util.rand-int(0, IconsDialogSetting.icons.length),
                            });
                        }
                    }
                }}
            }
        }
    }
}

component Body inherits Rectangle {
    in property <bool> is-search;

    public function scroll-to-top(){
        elist.scroll-to-top();
    }

    elist := EntryList {
        visible: !is-search && Store.find-entrys.length != 0;
        items: Store.find-entrys;
    }

    if is-search && Store.find-entrys-keyword.length != 0: EntryList {
        items: Store.find-entrys-keyword;
    }

    if (!is-search && Store.find-entrys.length == 0) || (is-search && Store.find-entrys-keyword.length == 0): NoDataImg {
        width: root.width * 0.6;
        text: Logic.tr(Store.is-cn, "没有消息");
    }

    ElevatedBtn {
        x: root.width - self.width - Theme.padding * 4;
        y: root.height - self.height - Theme.padding * 4;
        icon: Icons.refresh;
        enable-rotation-animation: true;

        clicked => {
            Logic.fetch-all-find-entrys();
        }
    }
}

export component Find inherits VerticalLayout {
    head := FHead {
        scroll-to_top => {
            body.scroll-to-top();
        }
    }

    body := Body {
        is-search: head.is-search;
    }
}
