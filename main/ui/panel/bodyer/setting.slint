import { LineEdit, CheckBox, ComboBox } from "std-widgets.slint";
import { Theme, Icons } from "../../theme.slint";
import { Logic } from "../../logic.slint";
import { Util } from "../../util.slint";
import { Store,  SettingUI, SettingSync, SettingProxy, SettingReading, SettingBackupRecover, SettingUpdate, SettingDetailIndex } from "../../store.slint";
import { CenterLayout, OkCancelDialogSetting, Divider, Link, Brand, IconBtn, Label, Head, SettingEntry, SettingDetail, SettingDetailInner, TabBtn, SettingDetailInnerVbox, SettingDetailLabel, TxtEdit, CancelBtn, ConfirmBtn, NoDataImg, Tag, RadioBtn} from "../../base/widgets.slint";


component UI inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "界 面");

    public function get() -> SettingUI {
        font-size-lineedit.clear-focus();

        return {
            font-size: font-size-lineedit.text,
            font-family: fonts-combox.current-value,
            language: Store.setting-ui.language,
            is-dark: Store.setting-ui.is-dark,
        };
    }

    public function set() {
        font-size-lineedit.text = Store.setting-ui.font-size;
        fonts-combox.current-value = Store.setting-ui.font-family;
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            font-size-txt := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "字体大小");
            }

            font-size-lineedit := LineEdit {
                input-type: number;
                height: font-size-txt.preferred-height * 1.6;
                placeholder-text: Logic.tr(Store.is-cn, "10 ~ 50");
                text: Store.setting-ui.font-size;
            }
        }

        SettingDetailInnerVbox {
            fonts-label := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "字体样式");
            }

            fonts-combox := ComboBox {
                height: fonts-label.preferred-height * 1.6;
                model: ["Default", "Source Han Serif CN", "Plaster"];
                current-value: Store.setting-ui.font-family;
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "选择语言");
            }

            HorizontalLayout {
                HorizontalLayout {
                    width: 50%;
                    cn-radio := RadioBtn {
                        text: "中文";
                        checked: Store.setting-ui.language == "cn";
                        check => {
                            Store.setting-ui.language = "cn";
                        }
                    }
                }

                en-radio := RadioBtn {
                    text: "English";
                    checked: Store.setting-ui.language == "en";
                    check => {
                        Store.setting-ui.language = "en";
                    }
                }
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "选择主题");
            }

            HorizontalLayout {
                HorizontalLayout {
                    width: 50%;
                    RadioBtn {
                        text: Logic.tr(Store.is-cn, "白天");
                        checked: !Theme.is-dark;
                        check => {
                            Theme.toggle();
                        }
                    }
                }

                RadioBtn {
                    text: Logic.tr(Store.is-cn, "黑暗");
                    checked: Theme.is-dark;
                    check => {
                        Theme.toggle();
                    }
                }
            }
        }
    }
}

component Reading inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "阅 读");

    public function get() -> SettingReading {
        return {
            browser: browser-combox.current-value,
            is-delete-after-reading: delete-after-reading-checkbox.checked,
        };
    }

    public function set(setting: SettingReading) {
        browser-combox.current-value = setting.browser;
        delete-after-reading-checkbox.checked = setting.is-delete-after-reading;

        if (browser-combox.current-value == "") {
            browser-combox.current-value = browser-combox.model[0];
        }
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            browser-label := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "选择浏览器");
            }

            browser-combox := ComboBox {
                height: browser-label.preferred-height * 1.6;
                model: [
                    "Default",
                    "Firefox",
                    "InternetExplorer",
                    "Chrome",
                    "Opera",
                    "Safari",
                    "WebPositive"
                ];
                current-value: self.model[0];
                current-index: 0;
            }
        }

        delete-after-reading-checkbox := CheckBox {
            text: self.checked ? Logic.tr(Store.is-cn, "已启用阅后即焚") : Logic.tr(Store.is-cn, "未启用阅后即焚");
        }
    }
}

component Sync inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "同 步");

    public function get() -> SettingSync {
        sync-interval-lineedit.clear-focus();
        sync-timeout-lineedit.clear-focus();

        return {
            sync-interval: sync-interval-lineedit.text,
            sync-timeout: sync-timeout-lineedit.text,
            is-auto-sync: sync-auto-checkbox.checked,
            is-start-sync: start-sync-checkbox.checked,
        };
    }

    public function set(setting: SettingSync) {
        sync-interval-lineedit.text = setting.sync-interval;
        sync-timeout-lineedit.text = setting.sync-timeout;
        sync-auto-checkbox.checked = setting.is-auto-sync;
        start-sync-checkbox.checked = setting.is-start-sync;
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            sync-interval-txt := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "同步时间间隔(分钟)");
            }

            sync-interval-lineedit := LineEdit {
                input-type: number;
                height: sync-interval-txt.preferred-height * 1.6;
                placeholder-text: Logic.tr(Store.is-cn, "请输入时间间隔");
            }
        }

        SettingDetailInnerVbox {
            sync-timeout-txt := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "同步超时(秒)");
            }

            sync-timeout-lineedit := LineEdit {
                input-type: number;
                height: sync-timeout-txt.preferred-height * 1.6;
                placeholder-text: Logic.tr(Store.is-cn, "请输入同步超时");
            }
        }

        sync-auto-checkbox := CheckBox {
            text: self.checked ? Logic.tr(Store.is-cn, "已启用自动同步") : Logic.tr(Store.is-cn, "未启用自动同步");
        }

        start-sync-checkbox := CheckBox {
            text: self.checked ? Logic.tr(Store.is-cn, "程序启动时，马上进行一次同步") : Logic.tr(Store.is-cn, "程序启动时，不马上进行一次同步");
        }
    }
}

component Proxy inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "代 理");

    public function get() -> SettingProxy {
        http-url-lineedit.clear-focus();
        http-port-lineedit.clear-focus();
        socks5-url-lineedit.clear-focus();
        socks5-port-lineedit.clear-focus();

        return {
            proxy-type: type-combox.current-value,
            http-url: http-url-lineedit.text,
            http-port: http-port-lineedit.text,
            socks5-url: socks5-url-lineedit.text,
            socks5-port: socks5-port-lineedit.text,
        };
    }

    public function set(setting: SettingProxy) {
        type-combox.current-value = setting.proxy-type;
        http-url-lineedit.text = setting.http-url;
        http-port-lineedit.text = setting.http-port;
        socks5-url-lineedit.text = setting.socks5-url;
        socks5-port-lineedit.text = setting.socks5-port;

        if (type-combox.current-value == "") {
            type-combox.current-value = type-combox.model[0];
        }
    }

    SettingDetailInner {
        type-combox := ComboBox {
            height: http-url-txt.preferred-height * 1.6;
            model: ["Http", "Socks5"];
            current-value: self.model[0];
        }

        Rectangle {
            VerticalLayout {
                visible: type-combox.current-value == "Http";
                spacing: Theme.spacing * 4;

                SettingDetailInnerVbox {
                    http-url-txt := SettingDetailLabel {
                        text: Logic.tr(Store.is-cn, "代理地址");
                    }

                    http-url-lineedit := LineEdit {
                        height: http-url-txt.preferred-height * 1.6;
                        placeholder-text: "127.0.0.1";
                    }
                }

                SettingDetailInnerVbox {
                    http-port-txt := SettingDetailLabel {
                        text: Logic.tr(Store.is-cn, "代理端口");
                    }

                    http-port-lineedit := LineEdit {
                        input-type: number;
                        height: http-port-txt.preferred-height * 1.6;
                        placeholder-text: "3128";
                    }
                }
            }

            VerticalLayout {
                visible: type-combox.current-value == "Socks5";
                spacing: Theme.spacing * 4;

                SettingDetailInnerVbox {
                    socks5-url-txt := SettingDetailLabel {
                        text: Logic.tr(Store.is-cn, "代理地址");
                    }

                    socks5-url-lineedit := LineEdit {
                        height: socks5-url-txt.preferred-height * 1.6;
                        placeholder-text: "127.0.0.1";
                    }
                }

                SettingDetailInnerVbox {
                    socks5-port-txt := SettingDetailLabel {
                        text: Logic.tr(Store.is-cn, "代理端口");
                    }

                    socks5-port-lineedit := LineEdit {
                        input-type: number;
                        height: socks5-port-txt.preferred-height * 1.6;
                        placeholder-text: "1080";
                    }
                }
            }
        }
    }
}

component About inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "关 于");

    VerticalLayout {
        alignment: start;
        spacing: Theme.spacing * 4;
        padding: Theme.padding * 2;
        padding-top: Theme.padding * 4;

        HorizontalLayout {
            alignment: center;

            Label {
                color: Theme.brand-color;
                text: Store.about-dialog.title;
                font-size: Theme.title1-font-size;
            }
        }

        Label {
            horizontal-alignment: center;
            text: Store.about-dialog.text;
            wrap: word-wrap;
        }

        VerticalLayout {
            spacing: Theme.spacing * 2;
            HorizontalLayout {
                alignment: center;
                spacing: Theme.spacing * 2;

                Label {
                    text: "🎉❤Buy Me a Coffee(MetaMask)❤🎉";
                }

                IconBtn {
                    icon: Icons.copy;
                    clicked => {
                        Logic.copy-to-clipboard(Store.about-dialog.sponsor);
                    }
                }
            }

            HorizontalLayout {
                alignment: center;
                Link {
                    wrap: word-wrap;
                    text: Store.about-dialog.sponsor;
                    color: Theme.placeholder-text-color;
                    font-size: Theme.default-font-size - 2px;

                    clicked => {
                        // Util.open-url("https://etherscan.io/address/" + Store.about-dialog.sponsor);
                    }
                }
            }
        }

        HorizontalLayout {
            alignment: center;
            Brand {
                width: 35%;
            }
        }
    }
}

component Help inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "帮 助");

    Flickable {
        SettingDetailInner {
            Label {
                text: Store.is-cn ? Store.help-dialog.text-cn : Store.help-dialog.text-en;
                wrap: word-wrap;
            }
        }
    }
}

component Feedback inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "反 馈");
    forward-focus: edit;

    SettingDetailInner {
        vbox-alignment: LayoutAlignment.stretch;

        edit := TxtEdit {
            vertical-stretch: 1;

            in-out property <int> current-text-len;

            edited => {
                self.current-text-len = Util.text-len(self.text);

                if (self.current-text-len > 2048) {
                    Logic.show-message(Logic.tr(Store.is-cn, "超过2048字数限制"), "warning");
                }
            }
        }

        HorizontalLayout {
            padding-right: Theme.padding * 2;
            padding-bottom: Theme.padding * 2;

            Label {
                text: edit.current-text-len + "/2048";
                color: edit.current-text-len > 2048 ? Theme.danger-color : Theme.placeholder-text-color;
            }

            HorizontalLayout {
                alignment: end;
                spacing: Theme.spacing * 4;

                cancel-btn := CancelBtn {
                    text: Logic.tr(Store.is-cn, "清空");
                    icon: Icons.cache-light;
                    clicked => {
                        edit.clear();
                        edit.focus();
                    }
                }

                ConfirmBtn {
                    text: Logic.tr(Store.is-cn, "发送");
                    icon: Icons.send;

                    clicked => {
                        Logic.send-feedback(edit.text);
                        root.back();
                    }
                }
            }
        }
    }
}

component Donate inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "捐 赠");

    private property <bool> is-wechat: true;

    SettingDetailInner {
        vbox-alignment: LayoutAlignment.stretch;

        HorizontalLayout {
            TabBtn {
                width: 50%;
                height: Theme.footer-height;
                icon: Icons.wechat-light;
                text: Logic.tr(Store.is-cn, "微信支付");
                checked: root.is-wechat;
                clicked => {
                    root.is-wechat = true;
                }
            }

            TabBtn {
                height: Theme.footer-height;
                icon: Icons.metamask-light;
                text: Logic.tr(Store.is-cn, "小狐狸（加密）支付");
                checked: !root.is-wechat;
                clicked => {
                    root.is-wechat = false;
                }
            }
        }

        Rectangle {
            if root.is-wechat: Image {
                source: Icons.wechat-pay;
                width: Math.min(root.width * 0.8, root.height * 0.8);
                height: self.width;
            }

            if !root.is-wechat: Image {
                source: Icons.metamask-pay;
                width: Math.min(root.width * 0.6, root.height * 0.6);
                height: self.width;
            }
        }
    }
}

component BackupRecover inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "备份与恢复");

    public function get() -> SettingBackupRecover {
        token-lineedit.clear-focus();

        return {
            api-token: token-lineedit.text,
            setting: setting-checkbox.checked,
        };
    }

    public function set(setting: SettingBackupRecover) {
        token-lineedit.text = setting.api-token;
        setting-checkbox.checked = setting.setting;
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            token-txt := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "API 令牌");
            }

            HorizontalLayout {
                spacing: Theme.spacing;

                token-lineedit := LineEdit {
                    height: token-txt.preferred-height * 1.6;
                    placeholder-text: Logic.tr(Store.is-cn, "请输入API令牌");
                }

                IconBtn {
                    width: token-lineedit.height;
                    icon: Icons.paste;
                    icon-width: Theme.icon-size * 1.2;

                    clicked => {
                        token-lineedit.text = "";
                        token-lineedit.paste();
                    }
                }
            }
        }

        SettingDetailInnerVbox {
            spacing: Theme.spacing * 2;

            content-label := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "备份与恢复选项");
            }

            favorite-checkbox := CheckBox {
                text: Logic.tr(Store.is-cn, "收藏夹");
                checked: true;
            }

            rss-checkbox := CheckBox {
                text: Logic.tr(Store.is-cn, "RSS列表");
                checked: true;
            }

            setting-checkbox := CheckBox {
                text: Logic.tr(Store.is-cn, "用户设置");
                checked: true;
            }
        }

        HorizontalLayout {
            alignment: center;
            spacing: Theme.spacing * 8;
            padding: Theme.padding * 2;

            cancel-btn := CancelBtn {
                text: Logic.tr(Store.is-cn, "备份");
                icon: Icons.upload-cloud;
                clicked => {
                    Logic.set-setting-backup-recover(root.get());

                    OkCancelDialogSetting.title-type = "warning";
                    OkCancelDialogSetting.title-text = Logic.tr(Store.is-cn, "警告");
                    OkCancelDialogSetting.body-text = Logic.tr(Store.is-cn, "是否备份？");
                    OkCancelDialogSetting.handle-type = "backup-to-remote";
                }
            }

            ConfirmBtn {
                text: Logic.tr(Store.is-cn, "恢复");
                icon: Icons.download-cloud;

                clicked => {
                    Logic.set-setting-backup-recover(root.get());

                    OkCancelDialogSetting.title-type = "warning";
                    OkCancelDialogSetting.title-text = Logic.tr(Store.is-cn, "警告");
                    OkCancelDialogSetting.body-text = Logic.tr(Store.is-cn, "是否恢复？");
                    OkCancelDialogSetting.handle-type = "recover-from-remote";
                }
            }
        }
    }
}

component Update inherits SettingDetail {
    private property <SettingUpdate> setting: Store.setting-update;
    private property <bool> is-same-version: setting.current-version == setting.latest-version;
    private property <bool> is-show-detail: (Store.is-cn && setting.detail-cn != "") || (!Store.is-cn && setting.detail-en != "");

    title: Logic.tr(Store.is-cn, "获取最新版本");

    SettingDetailInner {
        SettingDetailInnerVbox {
            version-txt := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "版本信息");
            }

            HorizontalLayout {
                HorizontalLayout {
                    alignment: start;
                    current-txt := Tag {
                        background: Theme.tag-colors[0];
                        text-color: self.background.darker(100%);
                        text: Logic.tr(Store.is-cn, "当前版本") + ": " + root.setting.current-version;
                    }
                }

                HorizontalLayout {
                    alignment: start;
                    latest-txt := Tag {
                        background: root.is-same-version ? Theme.tag-colors[0] : Theme.tag-colors[1];
                        text-color: self.background.darker(100%);
                        text: Logic.tr(Store.is-cn, "最新版本") + ": " + root.setting.latest-version;
                    }
                }
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "更新信息");
            }

            if is-show-detail: HorizontalLayout {
                padding-left: Theme.padding * 2;

                Label {
                    wrap: word-wrap;
                    text: Store.is-cn ? setting.detail-cn : setting.detail-en;
                    color: Theme.secondary-text-color;
                }
            }

            if !is-show-detail: Rectangle {
                NoDataImg {
                    width: root.width * 0.5;
                    text: Logic.tr(Store.is-cn, "没有数据");
                }
            }
        }

        if root.setting.url != "" && !root.is-same-version: HorizontalLayout {
            alignment: end;
            padding: Theme.padding * 2;

            ConfirmBtn {
                icon: Icons.download;
                text: Logic.tr(Store.is-cn, "下载最新版本");

                clicked => {
                    // Util.open-url(root.setting.url);
                }
            }
        }
    }
}

component Body inherits VerticalLayout {
    alignment: start;
    spacing: Theme.spacing;

    in-out property current-setting-detail-index <=> Store.current-setting-detail-index;

    callback switch(SettingDetailIndex);

    head := Head {
        hbox-alignment: LayoutAlignment.start;
        icon: Icons.setting-fill;
        title: Logic.tr(Store.is-cn, "设置");
    }

    Flickable {
        viewport-height: vbox.preferred-height;

        vbox := VerticalLayout {
            spacing: Theme.spacing * 2;

            SettingEntry {
                text: Logic.tr(Store.is-cn, "界 面");
                icon: Icons.ui;

                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.UI;
                    root.switch(SettingDetailIndex.UI);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "阅 读");
                icon: Icons.reading;

                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Reading;
                    root.switch(SettingDetailIndex.Reading);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "同 步");
                icon: Icons.sync;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Sync;
                    root.switch(SettingDetailIndex.Sync);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "代 理");
                icon: Icons.proxy-light;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Proxy;
                    root.switch(SettingDetailIndex.Proxy);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "缓 存");
                attach-text: Store.cache-size;
                icon: Icons.cache-light;
                clicked => {
                    OkCancelDialogSetting.title-type = "warning";
                    OkCancelDialogSetting.title-text = Logic.tr(Store.is-cn, "警告");
                    OkCancelDialogSetting.body-text = Logic.tr(Store.is-cn, "是否删除全部缓存？");
                    OkCancelDialogSetting.handle-type = "remove-all-cache";
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "关 于");
                icon: Icons.about-light;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.About;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "帮 助");
                icon: Icons.help-light;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Help;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "反 馈");
                icon: Icons.feedback;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Feedback;
                    root.switch(SettingDetailIndex.Feedback);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "捐 赠");
                icon: Icons.donate;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Donate;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Github");
                icon: Icons.github;
                clicked => {
                    // Util.open-url("https://github.com/Heng30/solana-wallet-sollet");
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "备份与恢复");
                icon: Icons.backup-recover;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.BackupRecover;
                    root.switch(SettingDetailIndex.BackupRecover);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "获取最新版本");
                icon: Icons.version;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Update;
                    root.switch(SettingDetailIndex.Update);
                }
            }
        }
    }
}

export component Setting inherits Rectangle {
    body := Body {
        visible: self.current-setting-detail-index == SettingDetailIndex.Home;

        switch(index) => {
            if (index == SettingDetailIndex.UI) {
                ui.set();
            } else if (index == SettingDetailIndex.Reading) {
                reading.set(Logic.get-setting-reading());
            } else if (index == SettingDetailIndex.Sync) {
                sync.set(Logic.get-setting-sync());
            } else if (index == SettingDetailIndex.Proxy) {
                proxy.set(Logic.get-setting-proxy());
            } else if (index == SettingDetailIndex.Feedback) {
                feedback.focus();
            } else if (index == SettingDetailIndex.BackupRecover) {
                backup-recover.set(Logic.get-setting-backup-recover());
            } else if (index == SettingDetailIndex.Update) {
                Logic.get-setting-update();
            }
        }
    }

    Rectangle {
        visible: !body.visible;

        ui := UI {
            visible: body.current-setting-detail-index == SettingDetailIndex.UI;
            back => {
                if (self.get().font-size == "") {
                    Logic.show-message(Logic.tr(Store.is-cn, "非法输入，输入不能为空"), "warning");
                    return;
                }
                body.current-setting-detail-index = SettingDetailIndex.Home;
                Logic.set-setting-ui(self.get());
            }
        }

        reading := Reading {
            visible: body.current-setting-detail-index == SettingDetailIndex.Reading;
            back => {
                body.current-setting-detail-index = SettingDetailIndex.Home;
                Logic.set-setting-reading(self.get());
            }
        }

        sync := Sync {
            visible: body.current-setting-detail-index == SettingDetailIndex.Sync;
            back => {
                if (self.get().sync-interval == "" || self.get().sync-timeout == "") {
                    Logic.show-message(Logic.tr(Store.is-cn, "非法输入，输入不能为空"), "warning");
                    return;
                }
                body.current-setting-detail-index = SettingDetailIndex.Home;
                Logic.set-setting-sync(self.get());
            }
        }

        proxy := Proxy {
            visible: body.current-setting-detail-index == SettingDetailIndex.Proxy;
            back => {
                body.current-setting-detail-index = SettingDetailIndex.Home;
                Logic.set-setting-proxy(self.get());
            }
        }

        feedback := Feedback {
            visible: body.current-setting-detail-index == SettingDetailIndex.Feedback;
            back => {
                body.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }

        backup-recover := BackupRecover {
            visible: body.current-setting-detail-index == SettingDetailIndex.BackupRecover;
            back => {
                body.current-setting-detail-index = SettingDetailIndex.Home;
                Logic.set-setting-backup-recover(self.get());
            }
        }

        update := Update {
            visible: body.current-setting-detail-index == SettingDetailIndex.Update;
            back => {
                body.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }
    }

    if !body.visible: Rectangle {
        if body.current-setting-detail-index == SettingDetailIndex.About: About {
            back => {
                body.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }

        if body.current-setting-detail-index == SettingDetailIndex.Help: Help {
            back => {
                body.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }

        if body.current-setting-detail-index == SettingDetailIndex.Donate: Donate {
            back => {
                body.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }
    }
}
