import { Store, SetupIndex, SettingUI, SettingProxy, SettingBackupRecover, SettingUpdate } from "./store.slint";

export global Logic {
    pure callback new-mnemonics(int) -> [string];
    new-mnemonics(counts) => {
        if (counts == 12) {
            return [
                "None", "None", "None", "None",
                "None", "None", "None", "None",
                "None", "None", "None", "None",
            ];
        } else if (counts == 24) {
            return [
                "None", "None", "None", "None",
                "None", "None", "None", "None",
                "None", "None", "None", "None",
                "None", "None", "None", "None",
                "None", "None", "None", "None",
                "None", "None", "None", "None",
            ];
        } else {
            return [];
        }
    }

    pure callback load-mnemonics() -> [string];
    load-mnemonics => {
        [
            "None", "None", "None", "None",
            "None", "None", "None", "None",
            "None", "None", "None", "None",
        ]
    }

    callback save-mnemonics([string]);
    save-mnemonics => {
        Store.current-setup-index = SetupIndex.SetPassword;
    }

    callback join-mnemonics([string]) -> string;

    callback save-username-info(string, string);
    save-username-info(username, passwrod) => {
        Store.is-show-setup-page = false;
    }

    callback update-cache-size();
    callback remove-all-cache();

    callback copy-to-clipboard(string);
    callback copy-from-clipboard() -> string;
    callback show-message(string, string);
    callback handle-ok-cancel-dialog(string, string);

    callback get-setting-ui() -> SettingUI;
    callback set-setting-ui(SettingUI);

    callback get-setting-proxy() -> SettingProxy;
    callback set-setting-proxy(SettingProxy);

    callback get-setting-backup-recover() -> SettingBackupRecover;
    callback set-setting-backup-recover(SettingBackupRecover);
    callback backup-to-remote(SettingBackupRecover);
    callback recover-from-remote(SettingBackupRecover);

    callback send-feedback(string);
    callback get-setting-update();

    pure callback tr(bool, string) -> string;
    tr(is-cn, text) => {
        return text;
    }

    callback is-valid-passwords(string, string) -> string;
    is-valid-passwords(password-first, password-second) => {
        return "";
    }

    callback is-valid-password(string) -> string;
    is-valid-password(password) => {
        return "默认错误信息";
    }
}
