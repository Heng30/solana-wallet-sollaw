import { Theme, Icons } from "../../theme.slint";
import { Store, HomeIndex, SendTokenProps } from "../../store.slint";
import { Logic } from "../../logic.slint";
import { AccountBalance, ElevatedBtn, Head, IconBtn, TextBtn, Banner, Label, Link, SettingDetail, SettingDetailInner, Loading, NoDataImg, TokenTile, TokenTileEntry, TokenTileWithSwitchEntry, TokenList, PasswordSetting, TokenListWithSwitch, TokenSender, IconsDialogSetting, AddressBook, TransactionFee } from "../../base/widgets.slint";
import { TestModeBanner } from "test-mode-banner.slint";

struct SenderSetting {
    recipient-address: string,
    props: SendTokenProps,
    transaction-fee: string,
    send-amount: string,
    password: string,
}

export global TokensSetting {
    in-out property <[TokenTileEntry]> entries: [
        { uuid: "uuid-1", symbol: "SOL", balance: "100.34", balance-usdt: "$1221.34" },
        {
            uuid: "uuid-2",
            symbol: "USDT",
            balance: "100.34",
            balance-usdt: "$100.34",
        },
        {
            uuid: "uuid-3",
            symbol: "DOG",
            balance: "120.34",
            balance-usdt: "$300.4",
        },
        {
            uuid: "uuid-3",
            symbol: "BTC",
            balance: "120.34",
            balance-usdt: "$5380.4",
        },
        {
            uuid: "uuid-3",
            symbol: "ETH",
            balance: "120.34",
            balance-usdt: "$6360.4",
        },
    ];

    in-out property <bool> management-entries-is-loading;
    in-out property <[TokenTileWithSwitchEntry]> management-entries:[
        {
            entry: { uuid: "uuid-1", symbol: "SOL", balance: "100.34", balance-usdt: "$1221.34" },
            checked: true,
        },
        {
            entry: { uuid: "uuid-1", symbol: "USDT", balance: "10.34", balance-usdt: "$12.34" },
            checked: true,
        }
    ];
    in-out property <SenderSetting> sender;

    public function clear-password() {
        sender.password = "";
    }
}

component TopHead inherits Head {
    icon: Icons.crypto;
    icon-width: Theme.icon-size * 1.2;
    title: Logic.tr(Store.is-cn, "主页");
    hbox-alignment: LayoutAlignment.start;
}

component AccountDetail inherits AccountBalance {
    account-name: Store.current-account.name;
    balance: Store.current-account.balance;

    account-clicked => {
        Logic.open-account-detail(Logic.get-current-network(), Store.current-account.pubkey);
    }

    copy => {
        Logic.copy-to-clipboard(Store.current-account.pubkey);
    }
}

component ManagementBtn inherits VerticalLayout {
    padding-bottom: Theme.padding * 2;

    btn := TextBtn {
        icon: Icons.management;
        text: Logic.tr(Store.is-cn, "管理代币");
        clicked => {
            Logic.refresh-tokens-management-entries(Logic.get-current-network(), Store.current-account.pubkey);
            Store.current-home-index = HomeIndex.Management;
        }
    }
}

component Management inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "管理代币");
    TokenListWithSwitch {
        entries: TokensSetting.management-entries;

        clicked(entry) => {
            Logic.open-token-detail(Logic.get-current-network(), entry.mint-address);
        }

        toggled(checked, entry) => {
            if (checked) {
                Logic.add-token(entry);
            } else {
                Logic.remove-token(entry.uuid);
            }
        }
    }
}

component Body inherits Rectangle {
    callback clicked-entry <=> tl.clicked;

    VerticalLayout {
        spacing: Theme.spacing * 2;

        AccountDetail { }

        tl := TokenList {
            entries: TokensSetting.entries;
        }

        ManagementBtn { }
    }

    ElevatedBtn {
        x: root.width - self.width - Theme.padding * 4;
        y: root.height - self.height - Theme.padding * 4;
        icon: Icons.refresh;

        clicked => {
            Logic.update-account-balance(Store.current-account.uuid, Logic.get-current-network(), Store.current-account.pubkey);
            Logic.update-tokens-info(Logic.get-current-network());
        }
    }
}

export component Home inherits Rectangle {
    private property <string> network: Logic.get-current-network();
    private property <TokenTileEntry> selected-entry;

    if Store.current-home-index == HomeIndex.Home: VerticalLayout {
        head := TopHead { }

        if network != "main": TestModeBanner {
            network: root.network;
        }

        Body {
            clicked-entry(entry) => {
                root.selected-entry = entry;
                Store.current-home-index = HomeIndex.Send;
            }
        }
    }

    if Store.current-home-index == HomeIndex.Management: Rectangle {
        if TokensSetting.management-entries-is-loading: Loading {
            loading-text: Logic.tr(Store.is-cn, "正在刷新...");
            colorize: Theme.secondary-brand-color;
            icon-size: parent.width * 0.2;
        }

        if TokensSetting.management-entries.length == 0 && !TokensSetting.management-entries-is-loading: NoDataImg { }

        if TokensSetting.management-entries.length > 0 && !TokensSetting.management-entries-is-loading: Management {
            back => {
                Store.current-home-index = HomeIndex.Home;
            }
        }
    }

    if Store.current-home-index == HomeIndex.Send: TokenSender {
        avatar: IconsDialogSetting.icon(Store.current-account.avatar-index);
        name: Store.current-account.name;
        network: Logic.get-current-network();
        send-token: root.selected-entry.symbol;
        send-address: Store.current-account.pubkey;
        recipient-address: TokensSetting.sender.recipient-address;
        total-balance: root.selected-entry.balance;
        total-balance-usdt: root.selected-entry.balance-usdt;

        back => {
            Store.current-home-index = HomeIndex.Home;
        }

        update-send-token-name => {
            Logic.update-token-name(root.selected-entry.uuid, self.send-token);
        }

        copy-send-address => {
            Logic.copy-to-clipboard(self.send-address);
        }

        open-address-book => {
            Store.current-home-index = HomeIndex.AddressBook;
        }

        open-network => {
            Logic.open-blockchain-network(self.network);
        }

        cancel => {
            self.back();
        }

        confirm => {
            TokensSetting.sender.send-amount = self.send-amount;

            TokensSetting.sender.props = {
                network: self.network,
                send-address: self.send-address,
                recipient-address: self.recipient-address,
                mint_address: root.selected-entry.mint-address,
                symbol: root.selected-entry.symbol,
                amount: self.send-amount,
            };

            PasswordSetting.set(true, "send-token", "");
        }
    }

    if Store.current-home-index == HomeIndex.AddressBook: AddressBook {
        back => {
            Store.current-home-index = HomeIndex.Send;
        }

        tap(entry) => {
            TokensSetting.sender.recipient-address = entry.address;
            self.back();
        }
    }

    if Store.current-home-index == HomeIndex.TransactionFee: TransactionFee {
        network: Logic.get-current-network();
        send-token: root.selected-entry.symbol;
        send-address: Store.current-account.pubkey;
        recipient-address: TokensSetting.sender.recipient-address;
        send-amount: TokensSetting.sender.send-amount;
        fee: TokensSetting.sender.transaction-fee;

        back => {
            Store.current-home-index = HomeIndex.Send;
        }

        cancel => {
            self.back();
        }

        confirm => {
            Logic.send-token(TokensSetting.sender.password, TokensSetting.sender.props);
        }
    }
}
