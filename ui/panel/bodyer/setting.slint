import { LineEdit, CheckBox, ComboBox } from "std-widgets.slint";
import { Theme, Icons } from "../../theme.slint";
import { Logic } from "../../logic.slint";
import { Util } from "../../util.slint";
import { Store,  SettingUI, SettingDeveloperMode, SettingDetailIndex, AccountEntry, SettingSecurityPrivacy } from "../../store.slint";
import { LineInput, CenterLayout, OkCancelDialogSetting, Divider, Link, Brand, IconBtn, Label, Mnemonic, Head, SettingEntry, SettingDetail, SettingDetailInner, TabBtn, SettingDetailInnerVbox, SettingDetailLabel, TxtEdit, CancelBtn, ConfirmBtn, NoDataImg, Tag, RadioBtn, TokenRecipient, SlideCard, ListTile, IconsDialogSetting, ElevatedBtn, PasswordSetting, Avatar, Help, AddressBook, AddressBookDetail, AddressBookEntry, SettingDetailSwitch, AddressBookSetting, About, ResetPassword } from "../../base/widgets.slint";

export global AccountMnemonicSetting {
    in-out property <string> mnemonic;

    public function clear() {
        self.mnemonic = "";
    }
}

component UI inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "偏好设置");

    public function get() -> SettingUI {
        font-size-lineedit.clear-focus();

        return {
            font-size: font-size-lineedit.text,
            font-family: fonts-combox.current-value,
            language: Store.setting-ui.language,
            is-dark: Store.setting-ui.is-dark,
        };
    }

    init => {
        font-size-lineedit.text = Store.setting-ui.font-size;
        fonts-combox.current-value = Store.setting-ui.font-family;
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            font-size-txt := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "字体大小");
            }

            font-size-lineedit := LineEdit {
                input-type: number;
                height: font-size-txt.preferred-height * 1.6;
                placeholder-text: Logic.tr(Store.is-cn, "10 ~ 50");
                text: Store.setting-ui.font-size;
            }
        }

        SettingDetailInnerVbox {
            fonts-label := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "字体样式");
            }

            fonts-combox := ComboBox {
                height: fonts-label.preferred-height * 1.6;
                model: ["Default", "Source Han Serif CN", "Plaster"];
                current-value: Store.setting-ui.font-family;
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "选择语言");
            }

            HorizontalLayout {
                HorizontalLayout {
                    width: 50%;
                    cn-radio := RadioBtn {
                        text: "中文";
                        checked: Store.setting-ui.language == "cn";
                        check => {
                            Store.setting-ui.language = "cn";
                        }
                    }
                }

                en-radio := RadioBtn {
                    text: "English";
                    checked: Store.setting-ui.language == "en";
                    check => {
                        Store.setting-ui.language = "en";
                    }
                }
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "选择主题");
            }

            HorizontalLayout {
                HorizontalLayout {
                    width: 50%;
                    RadioBtn {
                        text: Logic.tr(Store.is-cn, "白天");
                        checked: !Theme.is-dark;
                        check => {
                            Theme.toggle();
                        }
                    }
                }

                RadioBtn {
                    text: Logic.tr(Store.is-cn, "黑暗");
                    checked: Theme.is-dark;
                    check => {
                        Theme.toggle();
                    }
                }
            }
        }
    }
}

component Accounts inherits Rectangle {
    callback back <=> sd.back;
    callback selected(int);

    sd := SettingDetail {
        title: Logic.tr(Store.is-cn, "账户管理");

        private property <length> item-height: 80px;

        SettingDetailInner {
            vbox-spacing: Theme.spacing * 2;
            for item[index] in Store.accounts: VerticalLayout {
                alignment: LayoutAlignment.center;

                ListTile {
                    private property <int> icon-index: Util.bound(0, item.avatar-index, IconsDialogSetting.icons.length - 1);
                    private property <bool> is-current-account: item.uuid == Store.current-account.uuid;

                    height: item-height;
                    background: self.has-hover ? Theme.base-background.darker(3%) : Theme.base-background;
                    border-radius: Theme.border-radius;
                    drop-shadow-blur: Theme.padding * 2;
                    drop-shadow-color: Theme.base-background-drop-shadow;

                    is-show-left-icon: true;
                    left-icon: IconsDialogSetting.icons[icon-index];
                    left-icon-is-avatar: true;
                    left-icon-size: item-height * 2 / 5;
                    left-icon-colorize: Theme.icon-color;
                    left-icon-border-width: 2px;
                    left-icon-background: Theme.secondary-background;
                    left-icon-hover-background: self.left-icon-background.darker(5%);

                    title-text: item.name;
                    subtitle-text: item.pubkey;
                    subtitle-font-size: Theme.default-font-size - 2px;
                    middle-mouse-cursor: MouseCursor.pointer;

                    is-show-right-icon: true;
                    right-icon: is-current-account ? Icons.success-fill : Icons.switch;
                    right-colorize: is-current-account ? Theme.success-color : Colors.transparent;

                    left-clicked => {
                        IconsDialogSetting.set(true, "account", item.uuid);
                    }

                    middle-clicked => {
                        root.selected(index);
                    }

                    right-clicked => {
                        Logic.switch-account(Store.current-account.uuid, item.uuid);
                    }
                }
            }
        }
    }

    ElevatedBtn {
        x: root.width - self.width - Theme.padding * 4;
        y: root.height - self.height - Theme.padding * 4 - Theme.footer-height;

        icon: Icons.add-light;

        clicked => {
            PasswordSetting.set(true, "new-account", "");
        }
    }
}

component AccountDetail inherits SettingDetail {
    in property <int> selected-account-index;

    private property <AccountEntry> selected-account: Store.accounts[selected-account-index];
    private property <int> icon-index: Util.bound(0, selected-account.avatar-index, IconsDialogSetting.icons.length - 1);

    title: Logic.tr(Store.is-cn, "账 户");

    SettingDetailInner {
        Rectangle {
            height: Math.max(root.height * 0.2, 200px);

            Avatar {
                height: 80%;
                width: self.height;
                background: Theme.base-background.darker(3%);
                icon: IconsDialogSetting.icons[icon-index];

                clicked => {
                    IconsDialogSetting.set(true, "account", selected-account.uuid);
                }
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "账户名称");
            }

            LineInput {
                enabled: false;
                width: root.width - Theme.padding * 4;
                text: selected-account.name;
                icon: self.enabled ? Icons.checked-box : Icons.edit;
                clicked => {
                    self.enabled = !self.enabled;

                    if (self.enabled) {
                        self.focus();
                    } else {
                        Logic.update-account-name(selected-account.uuid, self.text);
                    }
                }

                accepted => {
                    self.clear-focus();
                    self.enabled = !self.enabled;
                    Logic.update-account-name(selected-account.uuid, self.text);
                }
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "账户地址");
            }

            LineInput {
                enabled: false;
                width: root.width - Theme.padding * 4;
                text: selected-account.pubkey;
                icon: Icons.qrcode;
                clicked => {
                    Store.current-setting-detail-index = SettingDetailIndex.AccountQrcode;
                }
            }
        }

        SettingEntry {
            text: Logic.tr(Store.is-cn, "显示组记词");
            icon: Icons.mnemonic;
            clicked => {
                PasswordSetting.set(true, "show-mnemonic", "");
            }
        }

        VerticalLayout {
            padding-top: Theme.padding * 5;
            spacing: Theme.spacing * 4;

            ConfirmBtn {
                icon: Icons.switch;
                border-radius: Theme.border-radius;
                font-size: Theme.title3-font-size;
                text: Logic.tr(Store.is-cn, "切换账户");

                clicked => {
                    Logic.switch-account(Store.current-account.uuid, selected-account.uuid)
                }
            }

            CancelBtn {
                icon: Icons.delete;
                colorize: Theme.danger-color;
                text-color: Theme.danger-color;
                border-radius: Theme.border-radius;
                font-size: Theme.title3-font-size;
                text: Logic.tr(Store.is-cn, "移除账户");

                clicked => {
                    PasswordSetting.set(true, "remove-account", selected-account.uuid);
                }
            }
        }
    }
}

component AccountMnemonic inherits SettingDetailInner {
    callback back();

    mc := Mnemonic {
        is-read-only: true;
        is-show-header: true;
        header-title: Logic.tr(Store.is-cn, "组记词");
        mnemonics: Logic.split-mnemonic(AccountMnemonicSetting.mnemonic);

        copy => {
            Logic.copy-to-clipboard(Logic.join-mnemonics(self.mnemonics));
        }

        back => {
            AccountMnemonicSetting.clear();
            root.back();
        }
    }
}

component SecurityAndPrivacy inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "安全与隐私");

    public function get() -> SettingSecurityPrivacy {
        return {
            max-prioritization-fee: prioritization-fee-input.text,
        };
    }

    public function set(setting: SettingSecurityPrivacy) {
        prioritization-fee-input.text = setting.max-prioritization-fee;
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "最大优先费用");
            }

            prioritization-fee-input := LineInput {
                width: root.width - Theme.padding * 4;
                is-show-icon: false;
                input-type: InputType.number;
                placeholder-text: "micro lamports";
            }
        }

        SettingEntry {
            icon: Icons.password;
            text: Logic.tr(Store.is-cn, "更改密码");
            clicked => {
                Store.current-setting-detail-index = SettingDetailIndex.ResetPassword;
            }
        }

        VerticalLayout {
            padding-top: Theme.padding * 5;
            CancelBtn {
                icon: Icons.reset-in-trash;
                colorize: Theme.danger-color;
                text-color: Theme.danger-color;
                border-radius: Theme.border-radius;
                font-size: Theme.title3-font-size;
                text: Logic.tr(Store.is-cn, "重置账户");

                clicked => {
                    OkCancelDialogSetting.set(true, "warning", Logic.tr(Store.is-cn, "警告"), Logic.tr(Store.is-cn, "是否重置账户？"), "remove-all-accounts", "");
                }
            }
        }
    }
}

component DeveloperMode inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "开发者模式");

    private property <string> network: "test";

    public function get() -> SettingDeveloperMode {
        return {
            enabled: mode-switch.checked,
            network: root.network,
        };
    }

    public function set(setting: SettingDeveloperMode) {
        mode-switch.checked = setting.enabled;
        root.network = setting.network;
    }

    SettingDetailInner {
        mode-switch := SettingDetailSwitch {
            icon: Icons.debug-light;
            text: Logic.tr(Store.is-cn,"测试模式");
        }

        if mode-switch.checked: VerticalLayout {
            spacing: Theme.spacing * 5;

            HorizontalLayout {
                HorizontalLayout {
                    width: 50%;
                    test-radio := RadioBtn {
                        text: Logic.tr(Store.is-cn, "测试网络");
                        checked: root.network == "test";
                        check => {
                            root.network = "test";
                        }
                    }
                }

                dev-radio := RadioBtn {
                    text: Logic.tr(Store.is-cn, "开发网络");
                    checked: root.network == "dev";
                    check => {
                        root.network = "dev";
                    }
                }
            }

            ConfirmBtn {
                icon: Icons.airdrop;
                border-radius: Theme.border-radius;
                font-size: Theme.title3-font-size;
                text: Logic.tr(Store.is-cn, "请求空投") + " 0.1SOL";

                clicked => {
                    Logic.request-airdrop-sol(root.network, Store.current-account.pubkey);
                }
            }
        }
    }
}

component Donate inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "捐 赠");

    private property <bool> is-wechat: true;

    SettingDetailInner {
        vbox-alignment: LayoutAlignment.stretch;

        HorizontalLayout {
            TabBtn {
                width: 50%;
                height: Theme.footer-height;
                icon: Icons.wechat-light;
                text: Logic.tr(Store.is-cn, "微信支付");
                checked: root.is-wechat;
                clicked => {
                    root.is-wechat = true;
                }
            }

            TabBtn {
                height: Theme.footer-height;
                icon: Icons.metamask-light;
                text: Logic.tr(Store.is-cn, "小狐狸（加密）支付");
                checked: !root.is-wechat;
                clicked => {
                    root.is-wechat = false;
                }
            }
        }

        Rectangle {
            if root.is-wechat: Image {
                source: Icons.wechat-pay;
                width: Math.min(root.width * 0.8, root.height * 0.8);
                height: self.width;
            }

            if !root.is-wechat: Image {
                source: Icons.metamask-pay;
                width: Math.min(root.width * 0.6, root.height * 0.6);
                height: self.width;
            }
        }
    }
}

component Body inherits VerticalLayout {
    alignment: start;
    spacing: Theme.spacing;

    in-out property current-setting-detail-index <=> Store.current-setting-detail-index;

    callback switch(SettingDetailIndex);

    head := Head {
        hbox-alignment: LayoutAlignment.start;
        icon: Icons.setting-fill;
        title: Logic.tr(Store.is-cn, "设置");
    }

    Flickable {
        viewport-height: vbox.preferred-height;

        vbox := VerticalLayout {
            spacing: Theme.spacing * 2;

            SettingEntry {
                text: Logic.tr(Store.is-cn, "偏好设置");
                icon: Icons.ui;

                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.UI;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "账户管理");
                icon: Icons.account;
                attach-text: Store.accounts.length;

                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Accounts;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "安全与隐私");
                icon: Icons.security;

                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.SecurityAndPrivacy;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "地址簿");
                icon: Icons.address-book;

                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.AddressBook;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "开发者模式");
                icon: Icons.developer;

                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.DeveloperMode;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "关 于");
                icon: Icons.about-light;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.About;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "帮 助");
                icon: Icons.help-light;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Help;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "捐 赠");
                icon: Icons.donate;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Donate;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Github");
                icon: Icons.github;
                clicked => {
                    Util.open-url("Default","https://github.com/Heng30/solana-wallet-sollaw");
                }
            }
        }
    }
}

export component Setting inherits Rectangle {
    private property <int> selected-account-index;

    if Store.current-setting-detail-index == SettingDetailIndex.Home: Body { }

    if Store.current-setting-detail-index != SettingDetailIndex.Home: Rectangle {
        if Store.current-setting-detail-index == SettingDetailIndex.UI: UI {
            back => {
                if (self.get().font-size == "") {
                    Logic.show-message(Logic.tr(Store.is-cn, "非法输入，输入不能为空"), "warning");
                    return;
                }
                Store.current-setting-detail-index = SettingDetailIndex.Home;
                Logic.set-setting-ui(self.get());
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.Accounts: Accounts {
            back => {
                Store.current-setting-detail-index = SettingDetailIndex.Home;
            }

            selected(account-index) => {
                root.selected-account-index = account-index;
                Store.current-setting-detail-index = SettingDetailIndex.AccountDetail;
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.AccountDetail: AccountDetail {
            selected-account-index: root.selected-account-index;

            back => {
                Store.current-setting-detail-index = SettingDetailIndex.Accounts;
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.AccountQrcode: TokenRecipient {

            title: Logic.tr(Store.is-cn, "二维码");
            account-name: Store.accounts[selected-account-index].name;
            address: Store.accounts[selected-account-index].pubkey;
            qrcode: Logic.qr-code(self.address);

            back => {
                Store.current-setting-detail-index = SettingDetailIndex.AccountDetail;
            }

            clicked-address => {
                Logic.open-account-detail(Logic.get-current-network(), self.address);
            }

            copy-address => {
                Logic.copy-to-clipboard(self.address);
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.AccountMnemonic: AccountMnemonic {
            back => {
                Store.current-setting-detail-index = SettingDetailIndex.AccountDetail;
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.SecurityAndPrivacy: SecurityAndPrivacy {
            init => {
                self.set(Logic.get-setting-security-privacy());
            }

            back => {
                Store.current-setting-detail-index = SettingDetailIndex.Home;
                Logic.set-setting-security-privacy(self.get());
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.ResetPassword: ResetPassword {
            private property <string> err;

            init => {
                self.focus();
            }

            back => {
                Store.current-setting-detail-index = SettingDetailIndex.SecurityAndPrivacy;
            }

            cancel => {
                self.back();
            }

            confirm(password-old, password-new-first, password-new-second) => {
                self.err = Logic.is-valid-reset-password(password-new-first, password-new-second);
                if (self.err != "") {
                    return self.err;
                }
                Logic.update-password(password-old, password-new-first);
                Store.current-setting-detail-index = SettingDetailIndex.SecurityAndPrivacy;
                return "";
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.DeveloperMode: DeveloperMode {
            init => {
                self.set(Logic.get-setting-developer-mode());
            }

            back => {
                Store.current-setting-detail-index = SettingDetailIndex.Home;
                Logic.set-setting-developer-mode(self.get());
                Logic.update-home-page();
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.AddressBook: AddressBook {
            is-show-add-btn: true;

            back => {
                Store.current-setting-detail-index = SettingDetailIndex.Home;
            }

            tap() => {
                AddressBookSetting.enabled-input = false;
                Store.current-setting-detail-index = SettingDetailIndex.AddressBookDetail;
            }

            add => {
                AddressBookSetting.enabled-input = true;
                Logic.add-address();
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.AddressBookDetail: AddressBookDetail {
            init => {
                self.qr-code = Logic.qr-code(AddressBookSetting.current-entry.address);
            }

            back => {
                Store.current-setting-detail-index = SettingDetailIndex.AddressBook;
            }

            update-name(uuid, name) => {
                Logic.update-address-name(uuid, name);
            }

            update-address(uuid, address) => {
                Logic.update-address(uuid, address);
                self.qr-code = Logic.qr-code(self.address);
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.About: About {
            back => {
                Store.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.Help: Help {
            entries: Store.helps;
            back => {
                Store.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }

        if Store.current-setting-detail-index == SettingDetailIndex.Donate: Donate {
            back => {
                Store.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }
    }
}
