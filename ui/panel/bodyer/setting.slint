import { LineEdit, CheckBox, ComboBox } from "std-widgets.slint";
import { Theme, Icons } from "../../theme.slint";
import { Logic } from "../../logic.slint";
import { Util } from "../../util.slint";
import { Store,  SettingUI, SettingDetailIndex } from "../../store.slint";
import { LineInput, CenterLayout, OkCancelDialogSetting, Divider, Link, Brand, IconBtn, Label, Head, SettingEntry, SettingDetail, SettingDetailInner, TabBtn, SettingDetailInnerVbox, SettingDetailLabel, TxtEdit, CancelBtn, ConfirmBtn, NoDataImg, Tag, RadioBtn} from "../../base/widgets.slint";

component UI inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "Áïå Èù¢");

    public function get() -> SettingUI {
        font-size-lineedit.clear-focus();

        return {
            font-size: font-size-lineedit.text,
            font-family: fonts-combox.current-value,
            language: Store.setting-ui.language,
            is-dark: Store.setting-ui.is-dark,
        };
    }

    public function set() {
        font-size-lineedit.text = Store.setting-ui.font-size;
        fonts-combox.current-value = Store.setting-ui.font-family;
    }

    SettingDetailInner {
        SettingDetailInnerVbox {
            font-size-txt := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "Â≠ó‰ΩìÂ§ßÂ∞è");
            }

            font-size-lineedit := LineEdit {
                input-type: number;
                height: font-size-txt.preferred-height * 1.6;
                placeholder-text: Logic.tr(Store.is-cn, "10 ~ 50");
                text: Store.setting-ui.font-size;
            }
        }

        SettingDetailInnerVbox {
            fonts-label := SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "Â≠ó‰ΩìÊ†∑Âºè");
            }

            fonts-combox := ComboBox {
                height: fonts-label.preferred-height * 1.6;
                model: ["Default", "Source Han Serif CN", "Plaster"];
                current-value: Store.setting-ui.font-family;
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "ÈÄâÊã©ËØ≠Ë®Ä");
            }

            HorizontalLayout {
                HorizontalLayout {
                    width: 50%;
                    cn-radio := RadioBtn {
                        text: "‰∏≠Êñá";
                        checked: Store.setting-ui.language == "cn";
                        check => {
                            Store.setting-ui.language = "cn";
                        }
                    }
                }

                en-radio := RadioBtn {
                    text: "English";
                    checked: Store.setting-ui.language == "en";
                    check => {
                        Store.setting-ui.language = "en";
                    }
                }
            }
        }

        SettingDetailInnerVbox {
            SettingDetailLabel {
                text: Logic.tr(Store.is-cn, "ÈÄâÊã©‰∏ªÈ¢ò");
            }

            HorizontalLayout {
                HorizontalLayout {
                    width: 50%;
                    RadioBtn {
                        text: Logic.tr(Store.is-cn, "ÁôΩÂ§©");
                        checked: !Theme.is-dark;
                        check => {
                            Theme.toggle();
                        }
                    }
                }

                RadioBtn {
                    text: Logic.tr(Store.is-cn, "ÈªëÊöó");
                    checked: Theme.is-dark;
                    check => {
                        Theme.toggle();
                    }
                }
            }
        }
    }
}

component About inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "ÂÖ≥ ‰∫é");

    VerticalLayout {
        alignment: start;
        spacing: Theme.spacing * 4;
        padding: Theme.padding * 2;
        padding-top: Theme.padding * 4;

        HorizontalLayout {
            alignment: center;

            Label {
                color: Theme.brand-color;
                text: Store.about-dialog.title;
                font-size: Theme.title1-font-size;
            }
        }

        Label {
            horizontal-alignment: center;
            text: Store.about-dialog.text;
            wrap: word-wrap;
        }

        VerticalLayout {
            spacing: Theme.spacing * 2;
            HorizontalLayout {
                alignment: center;
                spacing: Theme.spacing * 2;

                Label {
                    text: "üéâ‚ù§Buy Me a Coffee(MetaMask)‚ù§üéâ";
                }

                IconBtn {
                    icon: Icons.copy;
                    clicked => {
                        Logic.copy-to-clipboard(Store.about-dialog.sponsor);
                    }
                }
            }

            HorizontalLayout {
                alignment: center;
                Link {
                    wrap: word-wrap;
                    text: Store.about-dialog.sponsor;
                    color: Theme.placeholder-text-color;
                    font-size: Theme.default-font-size - 2px;

                    clicked => {
                        // Util.open-url("https://etherscan.io/address/" + Store.about-dialog.sponsor);
                    }
                }
            }
        }

        HorizontalLayout {
            alignment: center;
            Brand {
                width: 35%;
            }
        }
    }
}

component Help inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "Â∏Æ Âä©");

    Flickable {
        SettingDetailInner {
            Label {
                text: Store.is-cn ? Store.help-dialog.text-cn : Store.help-dialog.text-en;
                wrap: word-wrap;
            }
        }
    }
}

component Donate inherits SettingDetail {
    title: Logic.tr(Store.is-cn, "Êçê Ëµ†");

    private property <bool> is-wechat: true;

    SettingDetailInner {
        vbox-alignment: LayoutAlignment.stretch;

        HorizontalLayout {
            TabBtn {
                width: 50%;
                height: Theme.footer-height;
                icon: Icons.wechat-light;
                text: Logic.tr(Store.is-cn, "ÂæÆ‰ø°ÊîØ‰ªò");
                checked: root.is-wechat;
                clicked => {
                    root.is-wechat = true;
                }
            }

            TabBtn {
                height: Theme.footer-height;
                icon: Icons.metamask-light;
                text: Logic.tr(Store.is-cn, "Â∞èÁãêÁã∏ÔºàÂä†ÂØÜÔºâÊîØ‰ªò");
                checked: !root.is-wechat;
                clicked => {
                    root.is-wechat = false;
                }
            }
        }

        Rectangle {
            if root.is-wechat: Image {
                source: Icons.wechat-pay;
                width: Math.min(root.width * 0.8, root.height * 0.8);
                height: self.width;
            }

            if !root.is-wechat: Image {
                source: Icons.metamask-pay;
                width: Math.min(root.width * 0.6, root.height * 0.6);
                height: self.width;
            }
        }
    }
}

component Body inherits VerticalLayout {
    alignment: start;
    spacing: Theme.spacing;

    in-out property current-setting-detail-index <=> Store.current-setting-detail-index;

    callback switch(SettingDetailIndex);

    head := Head {
        hbox-alignment: LayoutAlignment.start;
        icon: Icons.setting-fill;
        title: Logic.tr(Store.is-cn, "ËÆæÁΩÆ");
    }

    Flickable {
        viewport-height: vbox.preferred-height;

        vbox := VerticalLayout {
            spacing: Theme.spacing * 2;

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Áïå Èù¢");
                icon: Icons.ui;

                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.UI;
                    root.switch(SettingDetailIndex.UI);
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "ÂÖ≥ ‰∫é");
                icon: Icons.about-light;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.About;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Â∏Æ Âä©");
                icon: Icons.help-light;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Help;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Êçê Ëµ†");
                icon: Icons.donate;
                clicked => {
                    root.current-setting-detail-index = SettingDetailIndex.Donate;
                }
            }

            SettingEntry {
                text: Logic.tr(Store.is-cn, "Github");
                icon: Icons.github;
                clicked => {
                    Util.open-url("Default","https://github.com/Heng30/solana-wallet-sollet");
                }
            }
        }
    }
}

export component Setting inherits Rectangle {
    body := Body {
        visible: self.current-setting-detail-index == SettingDetailIndex.Home;

        switch(index) => {
            if (index == SettingDetailIndex.UI) {
                ui.set();
            }
        }
    }

    Rectangle {
        visible: !body.visible;

        ui := UI {
            visible: body.current-setting-detail-index == SettingDetailIndex.UI;
            back => {
                if (self.get().font-size == "") {
                    Logic.show-message(Logic.tr(Store.is-cn, "ÈùûÊ≥ïËæìÂÖ•ÔºåËæìÂÖ•‰∏çËÉΩ‰∏∫Á©∫"), "warning");
                    return;
                }
                body.current-setting-detail-index = SettingDetailIndex.Home;
                Logic.set-setting-ui(self.get());
            }
        }
    }

    if !body.visible: Rectangle {
        if body.current-setting-detail-index == SettingDetailIndex.About: About {
            back => {
                body.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }

        if body.current-setting-detail-index == SettingDetailIndex.Help: Help {
            back => {
                body.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }

        if body.current-setting-detail-index == SettingDetailIndex.Donate: Donate {
            back => {
                body.current-setting-detail-index = SettingDetailIndex.Home;
            }
        }
    }
}
