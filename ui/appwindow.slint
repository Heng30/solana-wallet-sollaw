import { Theme, Icons } from "./theme.slint";
import { Logic } from "./logic.slint";
import { Store, SettingDetailIndex, SettingDeveloperMode } from "./store.slint";
import { Util } from "./util.slint";
import { Panel } from "./panel/panel.slint";
import { Toast, IconsDialogSetting, IconsDialog, OkCancelDialogV2, Blanket, LanguageDialog, OkCancelDialogSetting, LandingPage, Password, PasswordSetting, Password, AddressBookEntry, AddressBookSetting, AboutSetting, TransactionTileEntry, TransactionTileStatus, TokenTileEntry, TokenTileWithSwitchEntry } from "./base/widgets.slint";
import { Setup } from "./setup/panel.slint";
import { CreateAccount } from "./setup/create-account.slint";
import { AccountMnemonicSetting } from "./panel/bodyer/setting.slint";
import { HistorySetting } from "./panel/bodyer/history.slint";
import { TokensSetting } from "./panel/bodyer/home.slint";

import { Help, SettingDetailSwitch } from "./base/widgets.slint";

export component AppWindow inherits Window {
    default-font-size: Theme.default-font-size;
    default-font-family: Theme.default-font-family;
    min-height: Theme.default-height;

    background: Theme.base-background;
    icon: Icons.brand;
    title: "rssbox";

    if !Store.is-show-setup-page: Panel { }
    if Store.is-show-setup-page: Setup { }

    if IconsDialogSetting.show || PasswordSetting.show || OkCancelDialogSetting.show: Blanket {
        clicked => {
            IconsDialogSetting.show = false;
            PasswordSetting.show = false;
            OkCancelDialogSetting.show = false;
        }
    }

    if IconsDialogSetting.show: IconsDialog {
        is-prevent-event-forward: true;
        select-index(handle-type, index, user-data) => {
            if (handle-type == "account") {
                Logic.update-account-avatar-index(user-data, index);
            }
        }
    }

    if PasswordSetting.show: Password {
        private property <string> err;

        init => {
            self.focus();
        }

        back => {
            PasswordSetting.show = false;
        }

        cancel => {
            PasswordSetting.show = false;
        }

        confirm(handle-type, password, user-data) => {
            self.err = Logic.is-valid-password(password);

            if (self.err != "") {
                return self.err;
            }
            if (handle-type == "new-account") {
                Logic.new-account("", password);
            } else if (handle-type == "show-mnemonic") {
                Logic.show-mnemonic(password);
            } else if (handle-type == "remove-account") {
                Logic.remove_account(password, user_data);
            } else if (handle-type == "remove-all-accounts") {
                Logic.remove-all-accounts(password);
            }
            PasswordSetting.show = false;
            return "";
        }
    }

    if OkCancelDialogSetting.show: OkCancelDialogV2 {
        is-prevent-event-forward: true;
        width: Math.min(root.width * 0.9, 380px);
    }

    if Store.message.text != "": Toast {
        x: root.width / 2 - self.width / 2;
        y: 50px;
        inner-max-width: root.width * 80%;
        text: Store.message.text;
        type: Store.message.text-type;
        clicked => {
            Logic.copy-to-clipboard(self.text);
        }
    }

    if Store.is-show-landing-page: LandingPage {
        details: [
            {
                picture: Icons.landing-account,
                description: Logic.tr(Store.is-cn, "创建账户和使用组记词恢复账户"),
            },
            {
                picture: Icons.landing-send,
                description: Logic.tr(Store.is-cn, "查看、发送和接收Sol代币和Solana的通证"),
            },
            {
                picture: Icons.landing-welcome,
                description: Logic.tr(Store.is-cn, "欢迎使用，享受你的加密之旅"),
            }
        ];
        skipped => {
            Store.is-show-landing-page = false;
        }
    }

    Rectangle {
        visible: false;
        background: white;
        SettingDetailSwitch {
            // background: pink;
            text: "切换主题";
            icon: Icons.history;
        }

        // AddressBookDetail {}
        // AddressBook {}
        // Password { }
        // Login {}
        // SignIn {}
        // Mnemonic {
        //     init => {
        //         self.reset-mnemonics(24);
        //     }
        // }
    }
}

export { Util, Logic, Store, Theme, Icons, IconsDialogSetting, SettingDetailIndex, AccountMnemonicSetting, AddressBookEntry, AddressBookSetting, PasswordSetting, AboutSetting, TransactionTileEntry, TransactionTileStatus, HistorySetting, SettingDeveloperMode, TokenTileEntry, TokensSetting, TokenTileWithSwitchEntry }
