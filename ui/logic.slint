import { Store, SetupIndex, SettingUI, SettingDeveloperMode, AccountEntry } from "store.slint";
import { Icons } from "theme.slint";
import { TransactionTileEntry, TransactionTileStatus } from "base/transaction-tile.slint";
import { TokenTileEntry } from "base/token-tile.slint";

export global Logic {
    pure callback new-mnemonics(int) -> [string];
    pure callback paste-mnemonics() -> [string];
    pure callback join-mnemonics([string]) -> string;
    pure callback is-valid-mnemonic([string]) -> bool;
    pure callback split-mnemonic(string) -> [string];

    // (password) -> void
    callback show-mnemonic(string);

    // (username, password-first, password-second) -> error_message
    pure callback is-valid-sign-in-info(string, string, string) -> string;

    // (password-first, password-second) -> error_message
    pure callback is-valid-reset-password(string, string) -> string;

    // (passwrod) -> error_message
    pure callback is-valid-password(string) -> string;

    // (username, password, mnemonics) -> void
    callback save-secret-info(string, string, [string]);

    // (password-old, password-new) -> void
    callback update-password(string, string);

    callback update-current-derive-index(int);

    // (name, password) -> void
    callback new-account(string, string);

    // (uuid, name) -> void
    callback update-account-name(string, string);

    // (uuid, icon-index) -> void
    callback update-account-avatar-index(string, int);

    // (password, uuid) -> void
    callback remove-account(string, string);

    // (password) -> void
    callback remove-all-accounts(string);

    // (old-uuid, new-uuid) -> void
    callback switch-account(string, string);

    pure callback qr-code(string) -> image;
    qr-code => { return Icons.no-data; }

    callback add-address();

    // (uuid, name) -> void
    callback update-address-name(string, string);

    // (uuid, address) -> void
    callback update-address(string, string);

    // (uuid) -> void
    callback remove-address(string);

    callback add-history(TransactionTileEntry);

    // (uuid) -> void
    callback remove-history(string);

    // (uuid, status, is-update-db) -> void
    callback update-history-status(string, TransactionTileStatus, bool);

    callback refresh-all-pending-and-error-history();

    // (network, hash) -> void
    callback open-tx-detail(string, string);

    // (network, address) -> void
    callback open-account-detail(string, string);

    // (network) -> void
    callback switch-history-network(string);

    // (uuid, network, address) -> void
    callback update-account-balance(string, string, string);

    //  TODO
    // (entry) -> void
    callback add-token(TokenTileEntry);

    // (uuid) -> void
    callback remove-token(string);

    // (network, address) -> void
    callback refresh-tokens-management-entries(string, string);

    // (network, uuid) -> void
    callback open-send-token-page(string, string);

    // (network, mint-address) -> void
    callback open-token-detail(string, string);


    callback update-cache-size();
    callback remove-all-cache();

    callback copy-to-clipboard(string);
    callback copy-from-clipboard() -> string;
    callback show-message(string, string);
    callback handle-ok-cancel-dialog(string, string);

    callback get-setting-ui() -> SettingUI;
    callback set-setting-ui(SettingUI);

    pure callback get-current-network() -> string;
    callback get-setting-developer-mode() -> SettingDeveloperMode;
    callback set-setting-developer-mode(SettingDeveloperMode);

    pure callback tr(bool, string) -> string;
    tr(is-cn, text) => {
        return text;
    }

    pure public function network-cn(network: string) -> string {
        if (network == "main") {
            return tr(Store.is-cn, "主网络");
        } else if (network == "test") {
            return tr(Store.is-cn, "测试网络");
        } else if (network == "dev") {
            return Logic.tr(Store.is-cn, "开发网络");
        } else {
            return Logic.tr(Store.is-cn, "未知网络");
        }
    }
}
